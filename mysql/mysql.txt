Q1.What does "relational" mean in the context of a relational database management system (RDBMS)? Explain with an example.
ans-->In the context of a Relational Database Management System (RDBMS), the term "relational" refers to the way data is organized and stored in tables that are related to each other based on common fields (keys). The structure follows the principles of Relational Algebra, introduced by Dr. Edgar F. Codd in 1970.
1.Tables (Relations): Data is stored in tables (also called relations), with rows (records) and columns (fields).
2.Primary Keys: Each table has a unique identifier (Primary Key) to distinguish records.
3.Foreign Keys: Relationships between tables are established using Foreign Keys, which refer to Primary Keys in another table.
4.Normalization: Data is structured to reduce redundancy and improve integrity.
5.SQL for Queries: Structured Query Language (SQL) is used to retrieve and manipulate data.

Example of a Relational Database:

Letâ€™s consider a Student Management System with two related tables: Students and Courses.
Table: Students
Student_ID (PK)	Name	Age	Course_ID (FK)
1	John	           20	      101
2	Alice	           22	       102
3	Mark	           21	       101
Table: Courses
Course_ID (PK)	Course_Name
101     	    Mathematics
102	             Computer Science

Here:

Student_ID is the Primary Key in the Students table.
Course_ID is a Foreign Key in Students, referencing the Primary Key in Courses.
This establishes a one-to-many relationship (one course can have multiple students).


Q2.Explain the role of keys in relational databases. What is the difference between a primary key and a foreign key?
ans-->In a Relational Database Management System (RDBMS), keys are essential for ensuring data integrity, uniqueness, and relationships between tables. They help in uniquely identifying records, enforcing relationships, and optimizing searches.
Types of Keys in RDBMS

    Primary Key (PK)
    Foreign Key (FK)
    Candidate Key
    Super Key
    Composite Key
    Unique Key

In this discussion, weâ€™ll focus on Primary Key and Foreign Key.

**Primary Key (PK)

A Primary Key is a column or a set of columns that uniquely identifies each record in a table. It ensures that no two rows have the same value and cannot contain NULL values.

Student_ID (PK)	Name	Age
1	            John	20
2	            Alice	22

Here, Student_ID is the Primary Key because it uniquely identifies each student.

Q3.What are the four ACID properties in databases? Explain each property with an example.
ans-->ACID Properties in Databases
Property	            Definition	                                                                    Example
Atomicity	A transaction is all or nothing; if one part fails, the entire transaction is rolled back.	If â‚¹500 is transferred from A to B, but the system crashes after deducting from A, the transaction is undone.
Consistency	Ensures the database remains in a valid state before and after a transaction.	If A transfers â‚¹500 to B, the total bank balance remains unchanged.
Isolation	Concurrent transactions do not interfere with each other.	If two users withdraw â‚¹1,000 from a â‚¹5,000 account simultaneously, isolation prevents overdraft issues.
Durability	Once committed, a transaction is permanently stored, even if the system crashes.	After confirming a money transfer, the update remains safe even after a power failure.

ðŸš€ ACID ensures reliable and consistent transactions in databases.

Q4.What are the key differences between SQL and NoSQL databases? When would you prefer to use each?
ans-->Key Differences Between SQL and NoSQL Databases

   1. Structure:
        SQL databases use structured tables with rows and columns.
        NoSQL databases use flexible formats like JSON, key-value, graph, or wide-column.

   2. Schema:
        SQL requires a fixed schema, meaning data must follow a predefined structure.
        NoSQL has a dynamic schema, allowing flexible data storage without strict rules.

   3. Scalability:
        SQL scales vertically (by upgrading CPU/RAM).
        NoSQL scales horizontally (by distributing data across multiple servers).

   4. Transactions & Consistency:
        SQL follows ACID properties (ensuring strong consistency and reliability).
        NoSQL follows BASE properties (offering high availability with eventual consistency).

   5. Use Cases:
        Use SQL for structured data, banking, e-commerce, and complex queries.
        Use NoSQL for unstructured data, real-time analytics, IoT, and social media applications.

ðŸš€ SQL is best for structured, relational data with strict consistency, while NoSQL is ideal for scalable, flexible, high-speed applications.


Q5.Describe the purpose of MySQL Workbench. What are its primary features?
ans-->MySQL Workbench is a GUI (Graphical User Interface) tool used for managing MySQL databases. It provides a visual and user-friendly interface for database design, administration, and development, making it easier to interact with MySQL without using command-line queries.
Primary Features of MySQL Workbench

    Database Design & Modeling
        Allows users to create, edit, and visualize database schemas using ER diagrams (Entity-Relationship Diagrams).

    SQL Development
        Provides an SQL editor for writing, executing, and debugging SQL queries.
        Supports syntax highlighting and query optimization.

    Database Administration
        Manages users, permissions, and security settings.
        Allows backup and restoration of databases.

    Performance Monitoring & Tuning
        Offers query execution plans and performance insights to optimize database performance.

    Data Migration & Import/Export
        Supports data migration from other database systems like PostgreSQL, Oracle, and Microsoft SQL Server.
        Allows easy import/export of database data.

    Server Configuration & Management
        Provides tools to configure server settings, manage database instances, and monitor real-time performance.


Q6
ans-->Normalization in Databases

Normalization is the process of organizing data to reduce redundancy and ensure data integrity by dividing tables into smaller, related ones.
Why is Normalization Important?

 Eliminates duplicate data
Improves data consistency
 Enhances query performance
Prevents insertion, update, and deletion anomalies
Different Normal Forms (NF)
1 1NF (First Normal Form): No duplicate columns, atomic values only.
2 2NF (Second Normal Form): No partial dependency, all columns fully depend on the primary key.
3 3NF (Third Normal Form): No transitive dependency, non-key attributes donâ€™t depend on other non-key attributes.

Q7.What are the main advantages of using NoSQL databases for modern applications? Provide examples of use cases.
ans-->Advantages of NoSQL Databases for Modern Applications

    Scalability â€“ Easily scales horizontally for high traffic applications (e.g., Facebook, Twitter).
    Flexibility â€“ Supports dynamic and schema-less data structures (e.g., MongoDB for e-commerce catalogs).
    High Performance â€“ Optimized for fast read/write operations (e.g., Redis for caching).
    Big Data Handling â€“ Efficiently processes large datasets (e.g., Apache Cassandra for IoT data).
    Real-Time Applications â€“ Supports real-time data updates (e.g., Firebase for chat applications).

Q8.Explain the concept of a "transaction" in a relational database. Why is it important to ensure transactions follow ACID properties?
ans-->Transaction in a Relational Database

A transaction is a sequence of database operations that are executed as a single unit. It ensures data consistency and integrity.
Importance of ACID Properties

Transactions must follow ACID properties to maintain reliability:

    Atomicity â€“ Ensures all operations succeed or none are applied (e.g., banking transfers).
    Consistency â€“ Keeps the database in a valid state before and after transactions.
    Isolation â€“ Prevents conflicts between concurrent transactions.
    Durability â€“ Ensures committed changes persist even after system failures.

This guarantees data integrity and reliability, making transactions crucial for critical applications like banking, e-commerce, and stock trading. 

Q9.What is the purpose of indexing in MySQL databases? How does it improve query performance?
ans-->Purpose of Indexing in MySQL

Indexing in MySQL is used to speed up data retrieval by creating a structured way to locate records efficiently, similar to a book's table of contents.
How It Improves Query Performance

    Faster Searches â€“ Reduces the number of scanned rows (e.g., SELECT * FROM users WHERE email = 'abc@example.com').
    Optimized Sorting & Filtering â€“ Helps with ORDER BY and WHERE clauses.
    Efficient Joins â€“ Speeds up queries involving multiple tables (JOIN).
    Reduces I/O Operations â€“ Minimizes disk reads by quickly locating data.

ðŸ”¹ Example: Indexing on email in a users table improves lookups for authentication systems. 

Q10.What are the benefits of using foreign keys in relational databases? How do foreign keys help maintain data integrity?

Benefits of Foreign Keys in Relational Databases

    Enforce Referential Integrity â€“ Ensures relationships between tables remain consistent.
    Prevents Orphan Records â€“ Restricts deletion of referenced records (e.g., deleting a user with existing orders).
    Cascading Actions â€“ Supports ON DELETE CASCADE and ON UPDATE CASCADE for automatic updates/deletes.
    Improves Data Organization â€“ Establishes logical relationships between entities (e.g., orders linked to customers).

How Foreign Keys Maintain Data Integrity

    Prevents invalid data entry (e.g., an order cannot reference a non-existent customer).
    Ensures relational consistency, reducing data anomalies.

ðŸ”¹ Example: A customer_id foreign key in an orders table ensures every order is linked to a valid 

Q11.Explain the concept of "data consistency" in relational databases. How does the ACID property of Consistency ensure data integrity?
ans-->Data Consistency in Relational Databases

Data consistency ensures that the database remains in a valid and correct state before and after any transaction. It prevents invalid, duplicate, or conflicting data.
How ACID Consistency Ensures Data Integrity

    Ensures that a transaction transforms the database from one valid state to another.
    Enforces constraints, foreign keys, and rules (e.g., preventing negative account balances in banking).
    Rolls back transactions that would lead to an inconsistent state.

ðŸ”¹ Example: If a banking transaction debits one account but fails to credit another, consistency ensures a rollback, maintaining accuracy.


Q12.How can MySQL ensure that a CSV file is successfully imported using the LOAD DATA INFILE statement? Mention common errors that can occur and how to resolve them
nsuring Successful CSV Import in MySQL Using LOAD DATA INFILE

    Use the Correct Command Format:

LOAD DATA INFILE 'path/to/file.csv'  
INTO TABLE your_table  
FIELDS TERMINATED BY ','  
ENCLOSED BY '"'  
LINES TERMINATED BY '\n'  
IGNORE 1 ROWS;